moves=merge(moves,d)
moves$level = with(moves,ifelse(rt>rt_med,'H','L'))
ab=ddply(moves, .(path), function(x){return(f(do_burst(x)))})
names(ab)<-c('path','ab') #actual variance in burst size
rb=ddply(moves, .(path), function(x){
actual=f(do_burst(x))
rnds=do_rand_burst(x,f,sample_size)
return(length(which(rnds<=actual))/sample_size)}) #random
names(rb)<-c('path','rb')
k=merge(ab,rb)
k$diff=k$rb-k$ab
k$ratio=k$ab/k$rb
return(k)
}
k=burst_analysis(function(x){return(median(x))},sd,1000)
t=ks.test(k$rb, 'punif',0,1)
g<-ggplot(k,aes(k$rb)) + geom_histogram(binwidth = .05) + xlab('cdf of sd') +
#geom_vline(xintercept = 0.5, linetype=4, size=1.3)+
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
axis.text.y=element_blank(),
#axis.ticks=element_blank(),
#axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
#panel.background=element_blank(),
#panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
Cairo(file=paste(figpath,"/stat11.png",sep=''),
type="png",
units="px",
width=770,
height=350,
pointsize=12*2,
dpi=72*4)
g
dev.off()
g<-ggplot(k,aes(k$rb)) + geom_histogram(binwidth = .05) + xlab('cdf of sd') +
#geom_vline(xintercept = 0.5, linetype=4, size=1.3)+
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
#axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
#panel.background=element_blank(),
#panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
Cairo(file=paste(figpath,"/stat11.png",sep=''),
type="png",
units="px",
width=770,
height=350,
pointsize=12*2,
dpi=72*4)
g
dev.off()
burst_analysis<-function(sp,f,sample_size){
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$path<-paste(moves$subject,moves$instance,moves$trial_number,sep='_')
d=ddply(moves, .(path), function(x){return(sp(x$rt))})
names(d)<-c('path','rt_med')
moves=merge(moves,d)
moves$level = with(moves,ifelse(rt>rt_med,'H','L'))
ab=ddply(moves, .(path), function(x){return(f(do_burst(x)))})
names(ab)<-c('path','ab') #actual variance in burst size
rb=ddply(moves, .(path), function(x){return(mean(do_rand_burst(x,f,sample_size)))}) #random variance in burst size
names(rb)<-c('path','rb')
k=merge(ab,rb)
k$diff=k$rb-k$ab
k$ratio=k$ab/k$rb
return(k)
}
spearman_corr<-function(x){
return(cor(x,1:length(x), method = 'spearman'))
}
k=burst_analysis(function(x){return(median(x))},spearman_corr,1000)
g<-ggplot(k,aes(k$ab)) + geom_histogram(binwidth = .1) + xlab('spearman') +
#geom_vline(xintercept = 0, linetype=4, size=1.3)+
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
axis.text.y=element_blank(),
#axis.ticks=element_blank(),
#axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
#panel.background=element_blank(),
#panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
Cairo(file=paste(figpath,"/stat11_2.png",sep=''),
type="png",
units="px",
width=770,
height=350,
pointsize=12*2,
dpi=72*4)
g
dev.off()
g<-ggplot(k,aes(k$ab)) + geom_histogram(binwidth = .1) + xlab('spearman') +
#geom_vline(xintercept = 0, linetype=4, size=1.3)+
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
#axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
#panel.background=element_blank(),
#panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
Cairo(file=paste(figpath,"/stat11_2.png",sep=''),
type="png",
units="px",
width=770,
height=350,
pointsize=12*2,
dpi=72*4)
g
dev.off()
paths=read.csv('paths.csv', header = TRUE, sep=',',stringsAsFactors=F)
paths=subset(paths, complete=="True")
d=ddply(paths, .(subject), function(x){return(nrow(x))})
mean_sem_(d$V1)
paths=read.csv('paths.csv', header = TRUE, sep=',',stringsAsFactors=F)
paths=subset(paths, complete=='True')
d=ddply(paths, .(subject,instance), function(x){return(x$human_length/(x$optimal_length+1))})
d1=ddply(d, .(subject), function(x){return(mean(x$V1))})
mean_sem_(d$V1)
burst_analysis<-function(sp,f,sample_size){
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$path<-paste(moves$subject,moves$instance,moves$trial_number,sep='_')
d=ddply(moves, .(path), function(x){return(sp(x$rt))})
names(d)<-c('path','rt_med')
moves=merge(moves,d)
moves$level = with(moves,ifelse(rt>rt_med,'H','L'))
ab=ddply(moves, .(path), function(x){return(f(do_burst(x)))})
names(ab)<-c('path','ab') #actual variance in burst size
rb=ddply(moves, .(path), function(x){
actual=f(do_burst(x))
rnds=do_rand_burst(x,f,sample_size)
return(length(which(rnds<=actual))/sample_size)}) #random
names(rb)<-c('path','rb')
k=merge(ab,rb)
k$diff=k$rb-k$ab
k$ratio=k$ab/k$rb
return(k)
}
k=burst_analysis(function(x){return(median(x))},sd,1000)
t=ks.test(k$rb, 'punif',0,1)
g<-ggplot(k,aes(k$rb)) + geom_histogram(binwidth = .05) + xlab('Accumulated probability of sd') +
#geom_vline(xintercept = 0.5, linetype=4, size=1.3)+
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
#axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
#panel.background=element_blank(),
#panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
g<-ggplot(k,aes(k$rb)) + geom_histogram(binwidth = .05) + xlab('accumulated probability of sd') +
#geom_vline(xintercept = 0.5, linetype=4, size=1.3)+
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
#axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
#panel.background=element_blank(),
#panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
Cairo(file=paste(figpath,"/stat11.png",sep=''),
type="png",
units="px",
width=770,
height=350,
pointsize=12*2,
dpi=72*4)
g
dev.off()
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves=subset(moves,moves$rt<10)
g<-ggplot(moves, aes(x=moves$rt)) + geom_density(aes(color=moves$subject)) + guides(color=FALSE) +
theme(#axis.line=element_blank(),
#axis.text.x=element_blank(),
#axis.text.y=element_blank(),
#axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none"
#panel.background=element_blank(),
#panel.border=element_blank()
#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank()
#plot.background=element_blank()
)
g
Cairo(file=paste(figpath,"/time_dist.png",sep=''),
type="png",
units="px",
width=770,
height=150,
pointsize=12*2,
dpi=72*3)
g
dev.off()
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'neutral',ifelse(progress>0,'positive','negative')))
moves<-subset(moves, category!='NA')
g<-ggplot(moves,aes(x=moves$category)) + geom_bar(aes(fill=moves$category)) + xlab('move')  +guides(fill=FALSE)
g
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'neutral',ifelse(progress>0,'positive','negative')))
moves<-subset(moves, category!='NA')
g<-ggplot(moves,aes(x=moves$category)) + geom_bar(aes(fill=moves$category)) + xlab('move')  +guides(fill=FALSE)
g
Cairo(file=paste(figpath,"/p5.png",sep=''),
type="png",
units="px",
width=350,
height=350,
pointsize=12*4,
dpi=72*4)
g
dev.off()
Cairo(file=paste(figpath,"/p5.png",sep=''),
type="png",
units="px",
width=350,
height=350,
pointsize=12*4,
dpi=72*3)
g
dev.off()
Cairo(file=paste(figpath,"/p5.png",sep=''),
type="png",
units="px",
width=400,
height=350,
pointsize=12*4,
dpi=72*2.5)
g
dev.off()
Cairo(file=paste(figpath,"/p5.png",sep=''),
type="png",
units="px",
width=500,
height=350,
pointsize=12*4,
dpi=72*3)
g
dev.off()
Cairo(file=paste(figpath,"/p5.png",sep=''),
type="png",
units="px",
width=500,
height=350,
pointsize=12*4,
dpi=72*4)
g
dev.off()
Cairo(file=paste(figpath,"/p5.png",sep=''),
type="png",
units="px",
width=500,
height=350,
pointsize=12*4,
dpi=72*3.7)
g
dev.off()
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'neutral',ifelse(progress>0,'positive','negative')))
d=aggregate(moves,by = list("category"=moves$category,"subject"=moves$subject), FUN = "length")
g<-ggplot(d,aes(x=d$category, y=d$rt)) + stat_summary( fun.y="mean",aes(fill=category), geom="bar") + xlab('move')+
ylab("Count") + stat_summary(geom = "errorbar", position = "dodge", width=0.2, size=1,fun.data = mean_sem)+guides(fill=F)
g
Cairo(file=paste(figpath,"/p8.png",sep=''),
type="png",
units="px",
width=450,
height=350,
pointsize=12*4,
dpi=72*3.7)
g
dev.off()
Cairo(file=paste(figpath,"/p8.png",sep=''),
type="png",
units="px",
width=450,
height=350,
pointsize=12*4,
dpi=72*3.5)
g
dev.off()
Cairo(file=paste(figpath,"/p8.png",sep=''),
type="png",
units="px",
width=500,
height=350,
pointsize=12*4,
dpi=72*3.5)
g
dev.off()
Cairo(file=paste(figpath,"/p8.png",sep=''),
type="png",
units="px",
width=500,
height=350,
pointsize=12*4,
dpi=72*3.2)
g
dev.off()
moves=read.csv('moves.1.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'Neutral',ifelse(progress>0,'Positive','Negative')))
moves= subset(moves, moves$rt < 15)
my_colors= c('blue','green','red')
ggplot() +
geom_density(data = subset(moves,category=='Negative'), aes(x=rt,fill='Negative'), alpha=0.3) +
geom_density(data = subset(moves,category=='Neutral'), aes(x=rt,fill='Neutral'), alpha=0.4) +
geom_density(data = subset(moves,category=='Positive'), aes(x=rt,fill="Positive"), alpha=0.2) +
scale_fill_manual(name="Move category", values=my_colors)+
geom_density(data = subset(moves,category=='Negative'), aes(x=rt,fill='Negative'), alpha=0.0, size=0.5, color=my_colors[1], show.legend = F) +
geom_density(data = subset(moves,category=='Neutral'), aes(x=rt,fill='Neutral'), alpha=0.0, size=0.5, color=my_colors[2], show.legend = F) +
geom_density(data = subset(moves,category=='Positive'), aes(x=rt,fill="Positive"), alpha=0.0, size=0.5, color=my_colors[3], show.legend = F) +
#add means
geom_vline(xintercept=mean(subset(moves,category=='Negative')$rt), color=my_colors[1], size=1, linetype=2)+
geom_vline(xintercept=mean(subset(moves,category=='Neutral')$rt), color=my_colors[2], size=1, linetype=2)+
geom_vline(xintercept=mean(subset(moves,category=='Positive')$rt), color=my_colors[3], size=1, linetype=2)+
theme(legend.position=c(.8, .6), legend.title = element_text(size=12),legend.text = element_text(size=10), text = element_text(size=18))+
guides(color='blue')+
xlab("Seconds")
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'Neutral',ifelse(progress>0,'Positive','Negative')))
sub='andra.log'
moves= subset(moves, moves$progress !='NA' & subject==sub)
moves=arrange(moves, subject, category, rt)
d=ddply(moves, .(subject, category), transform, ecdf=ecdf(rt)(rt))
mr=d[which(d$rt == max(d$rt)),]
d<-rbind(d,mr)
d[nrow(d),12]<-'Positive'
d<-rbind(d,mr)
d[nrow(d),12]<-'Negative'
d<-rbind(d,mr)
d[nrow(d),12]<-'Neutral'
g<-ggplot(d, aes(y=ecdf, x=rt)) + geom_line(aes(color=category), size=1) +
xlab('Response time') + ylab('CDF')+
theme(legend.position=c(.6, .5),
legend.title = element_text(size=12),
legend.text = element_text(size=10),
text = element_text(size=18),
legend.key.height = unit(0.2,'cm'))
g
g<-ggplot(d, aes(y=ecdf, x=rt)) + geom_line(aes(color=category), size=1) +
xlab('response time') + ylab('accumulated probability')+
theme(legend.position=c(.6, .5),
legend.title = element_text(size=12),
legend.text = element_text(size=10),
text = element_text(size=18),
legend.key.height = unit(0.2,'cm'))
Cairo(file=paste(figpath,"/p16_1.png",sep=''),
type="png",
units="px",
width=470*1.2,
height=300,
pointsize=12*2,
dpi=72*2)
g
dev.off()
g<-ggplot(d, aes(y=ecdf, x=rt)) + geom_line(aes(color=category), size=1) +
xlab('response time') + ylab('accum. probability')+
theme(legend.position=c(.6, .5),
legend.title = element_text(size=12),
legend.text = element_text(size=10),
text = element_text(size=18),
legend.key.height = unit(0.2,'cm'))
Cairo(file=paste(figpath,"/p16_1.png",sep=''),
type="png",
units="px",
width=470*1.2,
height=350,
pointsize=12*2,
dpi=72*2)
g
dev.off()
g
Cairo(file=paste(figpath,"/p16_1.png",sep=''),
type="png",
units="px",
width=470*1.2,
height=400,
pointsize=12*2,
dpi=72*2)
g
dev.off()
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'Neutral',ifelse(progress>0,'Positive','Negative')))
moves= subset(moves, category!='NA')
moves= subset(moves, moves$rt < 15)
bw=0.5
alp=1
sz=1
g<-ggplot() +
geom_freqpoly(data = moves, aes(x=rt,group=interaction(subject,category), color=category), binwidth=bw, size=sz, alpha=alp) +
theme(legend.position=c(.8, .6), text = element_text(size=18))+
theme(legend.title = element_text(size=12), legend.text = element_text(size=12),legend.key.height = unit(0.5,'cm'))+
xlab("Seconds")
g
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'Neutral',ifelse(progress>0,'Positive','Negative')))
moves= subset(moves, category!='NA')
d=ddply(moves, .(subject, category), function(x){return(mean_sem(x$rt))})
g<-ggplot(d, aes(x=d$category,y=d$y)) +  stat_summary(geom='bar', fun.y = 'mean')  +
stat_summary(geom='errorbar', fun.data = mean_sem, size=2, width=0.4)+
theme(text = element_text(size=18))+ xlab("category") + ylab("seconds")
g
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=400*1.2,
height=300,
pointsize=12*2,
dpi=72*4)
g
dev.off()
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=400*1.2,
height=300,
pointsize=12*2,
dpi=72*3)
g
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=400*1.5,
height=300,
pointsize=12*2,
dpi=72*3)
g
dev.off()
moves=read.csv('moves.c.csv', header = TRUE, sep=',',stringsAsFactors=F)
moves$category=with(moves, ifelse(progress==0, 'Neutral',ifelse(progress>0,'Positive','Negative')))
moves= subset(moves, category!='NA')
d=ddply(moves, .(subject, category), function(x){return(mean_sem(x$rt))})
g<-ggplot(d, aes(x=d$category,y=d$y)) +  stat_summary(geom='bar', fun.y = 'mean')  +
stat_summary(geom='errorbar', fun.data = mean_sem, size=2, width=0.4)+
theme(text = element_text(size=18))+ xlab("category") + ylab("Rt(sec)")
g
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=470*1.2,
height=400,
pointsize=12*2,
dpi=72*3.2)
g
dev.off()
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=470*1.2,
height=400,
pointsize=12*2,
dpi=72*3)
g
dev.off()
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=470*1.4,
height=400,
pointsize=12*2,
dpi=72*3)
g
dev.off()
Cairo(file=paste(figpath,"/p16_3.png",sep=''),
type="png",
units="px",
width=470*1.4,
height=400,
pointsize=12*2,
dpi=72*2.5)
g
dev.off()
